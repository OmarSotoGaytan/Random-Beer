{"version":3,"sources":["logo.svg","app/components/Main.js","app/components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Main","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","className","props","cambio","name","src","img","description","React","Component","Header","_this","call","state","camb","id","type","onClick","refrescar","bind","App","auxiliar","_this2","fetch","then","data","json","setState","image_url","Header_Header","Main_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8540ba20.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nexport class Main extends React.Component{\r\n    render(){\r\n      \r\n        return (\r\n            <div className=\"container cerveza\">\r\n\r\n                <div className=\"row titulo\">\r\n                    <p>{this.props.cambio.name}</p>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-6\">\r\n                    <img  className=\"img img-fluid\" src={this.props.cambio.img} />\r\n                    </div>\r\n                    <div className=\"col-sm-6 texto text-center\">\r\n                        <p>{this.props.cambio.description}</p>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n            \r\n            ); \r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Main} from './Main'\r\nexport  class Header extends React.Component{\r\n    constructor(){\r\n        super();\r\n        var hola;\r\n        this.state={\r\n            cambio: \"true\"\r\n        };\r\n    }\r\n    refrescar(){\r\n        this.props.camb();\r\n     \r\n    }\r\n    render(){\r\n      \r\n        return (\r\n        <div className=\"header-container container-fluid\">     \r\n        <div className=\"row\">\r\n        <header className=\"header col-auto mr-auto\" id=\"hola\">Random Beer</header>\r\n        <button type=\"button\"  onClick={this.refrescar.bind(this)} className=\" header-button btn btn-primary btn-sm col-auto\">Refresh</button>\r\n        </div>\r\n      \r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Header} from './app/components/Header'\nimport {Main} from './app/components/Main'\nclass App extends Component {\n\n  //Constructor \n  constructor(){\n    super();\n    var auxiliar;\n    \n    \n    this.state={\n      cambio: true,\n      id: '',\n      name: '',\n      description: '',\n      img: ''\n    };\n    this.cambio();\n  }\n  //Funcion que hace un request a al api que regresa un json\n  cambio(){\n    var auxiliar;\n    fetch(\"https://api.punkapi.com/v2/beers/random\").then(data => {\n   \n    return data.json();\n    }).then(data => {\n      auxiliar=data[0];\n      \n      this.setState({\n        cambio: !this.state.cambio,\n        id: auxiliar.id,\n        name: auxiliar.name,\n        description: auxiliar.description,\n        img: auxiliar.image_url\n      });\n    });\n   \n   \n  }\n  //Renderizar el objeto\n  render() {\n   \n    return (\n       <div >\n       <Header camb={this.cambio.bind(this)} />\n       <Main cambio={this.state}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}